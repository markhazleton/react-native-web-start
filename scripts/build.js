#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('🏗️  Starting comprehensive build process...');
console.log('');

// Define build steps
const buildSteps = [
  {
    name: 'Verify Project Structure',
    command: 'node scripts/verify-structure.js',
    description: 'Verify all required files exist for the build'
  },
  {
    name: 'Generate Build Info',
    command: 'node scripts/generate-build-info.js',
    description: 'Create build metadata in packages/shared/src/buildInfo.json'
  },
  {
    name: 'Copy Assets',
    command: 'node scripts/copy-assets.js',
    description: 'Copy assets from /assets to /public'
  },
  {
    name: 'Copy Documentation',
    command: 'node scripts/copy-docs.js',
    description: 'Copy documentation files to public/documentation'
  },
  {
    name: 'Build Web Application',
    command: 'vite build',
    description: 'Build web application with Vite'
  }
];

// Execute build steps
let currentStep = 1;
const totalSteps = buildSteps.length;

for (const step of buildSteps) {
  console.log(`📋 Step ${currentStep}/${totalSteps}: ${step.name}`);
  console.log(`   ${step.description}`);
  
  try {
    console.log(`   Running: ${step.command}`);
    execSync(step.command, { 
      stdio: 'inherit',
      cwd: path.dirname(__dirname)
    });
    console.log(`   ✅ ${step.name} completed successfully`);
  } catch (error) {
    console.error(`   ❌ ${step.name} failed:`, error.message);
    process.exit(1);
  }
  
  console.log('');
  currentStep++;
}

console.log('🎉 Build completed successfully!');
console.log('');
console.log('📊 Build Summary:');
console.log('   ✅ Build metadata generated');
console.log('   ✅ Assets copied to public folder');
console.log('   ✅ Documentation prepared');
console.log('   ✅ Web application built');
console.log('');
console.log('📁 Output location: ./dist/');
console.log('🚀 Ready to deploy! Run: npm run preview to test locally');

// Generate build manifest
const buildManifest = {
  buildTime: new Date().toISOString(),
  sources: {
    'dist/': 'Built by Vite from packages/shared/src/',
    'dist/PromptSpark.svg': 'Copied from assets/logos/PromptSpark.svg',
    'dist/icon.png': 'Copied from assets/mobile/icon.png',
    'dist/favicon.png': 'Copied from assets/mobile/favicon.png',
    'dist/documentation/': 'Copied from documentation/',
    'packages/shared/src/buildInfo.json': 'Generated by scripts/generate-build-info.js'
  },
  buildSteps: buildSteps.map(step => step.name)
};

const manifestPath = path.join(__dirname, '..', 'dist', 'build-manifest.json');
fs.writeFileSync(manifestPath, JSON.stringify(buildManifest, null, 2));
console.log('📄 Build manifest created: dist/build-manifest.json');
